{"version":3,"sources":["container/todo/form/index.js","container/todo/list/index.js","container/todo/index.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","click","useState","input","setInput","ref","useRef","handleSubmit","current","focus","className","type","name","placeholder","value","onChange","event","target","onKeyDown","key","preventDefault","stopPropagation","onClick","displayName","TodoList","completed","allView","setAllView","completedView","setCompletedView","hasList","length","hasCompletedList","map","item","id","text","ToDo","items","setItems","completedItems","setCompletedItems","newItem","Date","now","concat","it","filter","oldItem","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sRAIMA,G,MAAW,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EAEFC,mBAAS,IAFP,mBAErBC,EAFqB,KAEdC,EAFc,KAGtBC,EAAKC,mBAMLC,EAAe,WACjBN,EAAME,GACNC,EAAS,IACTC,EAAIG,QAAQC,SAWhB,OACC,yBAAKC,UAAU,aACR,2BACIC,KAAK,OACLC,KAAK,aACLC,YAAY,WACZC,MAAOX,EACPE,IAAKA,EACLU,SA1BS,SAACC,GAClBZ,EAASY,EAAMC,OAAOH,QA0BdI,UAjBM,SAACF,GACG,UAAdA,EAAMG,MACRH,EAAMI,iBACNJ,EAAMK,kBACNd,QAeD,4BAAQe,QAASf,GAAjB,YAKTP,EAASuB,YAAc,WAMRvB,QC7CTwB,G,MAAW,SAAC,GAAiC,IAA/BV,EAA8B,EAA9BA,MAAOb,EAAuB,EAAvBA,MAAOwB,EAAgB,EAAhBA,UAAgB,EAEhBvB,oBAAS,GAFO,mBAEvCwB,EAFuC,KAE9BC,EAF8B,OAGJzB,oBAAS,GAHL,mBAGvC0B,EAHuC,KAGxBC,EAHwB,KAIxCC,EAAUhB,EAAMiB,OAAS,GAAKN,EAAUM,OAAS,EACjDC,EAAmBP,EAAUM,OAAS,EAa5C,OACI,yBAAKrB,UAAU,eACVoB,GACD,wBAAIpB,UAAU,cACTgB,GAAWZ,EAAMmB,KAAI,SAAAC,GAAI,OACtB,wBAAIf,IAAKe,EAAKC,IACbD,EAAKE,KACF,yBAAK1B,UAAU,mBAAoBY,QAAS,kBAAMrB,EAAMiC,KACpD,0BAAMxB,UAAU,0BAI3BsB,GAAoBJ,GAAkBH,EAAUQ,KAAI,SAAAC,GAAI,OACrD,wBAAIf,IAAKe,EAAKC,IAAKD,EAAKE,UAK/BN,GACG,yBAAKpB,UAAU,aACX,0BAAMY,QA9BC,WACnBK,GAAW,GACXE,GAAiB,IA4B0BnB,UAAS,WAAMgB,EAAO,cAArD,OACCM,GACG,0BAAMV,QA5BG,WACzBO,GAAiB,GACjBF,GAAW,IA0B0CjB,UAAS,WAAMkB,EAAa,cAAjE,iBAQxBJ,EAASD,YAAc,WAQRC,QCPAa,G,MA9CF,WAAO,IAAD,EAEQnC,mBAAS,IAFjB,mBAEXoC,EAFW,KAEJC,EAFI,OAG0BrC,mBAAS,IAHnC,mBAGXsC,EAHW,KAGKC,EAHL,KA8Bf,OACC,yBAAK/B,UAAU,iBACjB,wBAAIA,UAAU,iBAAd,aACG,kBAAC,EAAD,CAAUT,MA3BI,SAACE,GACnB,GAAKA,EAAL,CAGA,IAAMuC,EAAU,CACfN,KAAMjC,EACNgC,GAAIQ,KAAKC,OAEVL,EAASD,EAAMO,OAAOH,QAoBlB,kBAAC,EAAD,CAAU5B,MAAOwB,EAAOrC,MAjBN,SAAC6C,GACjBP,EAASD,EAAMS,QAAO,SAACb,GAC5B,GAAGA,EAAKC,KAAOW,EAAGX,GAAG,CACpB,IAAMa,EAAUd,EAChBO,EAAkBD,EAAeK,OAAOG,IAEhC,GAAGd,EAAKC,KAAOW,EAAGX,GAC1B,OAAOD,OAU0CT,UAAWe,OC9BjDS,MANf,WACE,OACE,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1355bf7e.chunk.js","sourcesContent":["import React, { PropTypes, useState, useRef } from 'react';\r\n\r\nimport './form.scss';\r\n\r\nconst TodoForm = ({ click }) => {\r\n\r\n    const [input, setInput] = useState('');\r\n    const ref= useRef();\r\n\r\n    const handleChange = (event) => {\r\n        setInput(event.target.value);\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        click(input);\r\n        setInput('');\r\n        ref.current.focus();\r\n    }\r\n\r\n    const onKeyDown = (event) => {\r\n        if (event.key === 'Enter') {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          handleSubmit();\r\n        }\r\n      }\r\n\r\n    return (\r\n    \t<div className=\"todo-form\">\r\n            <input \r\n                type=\"text\"\r\n                name=\"todo-input\"\r\n                placeholder=\"Add Todo\"\r\n                value={input}\r\n                ref={ref}\r\n                onChange={handleChange}\r\n                onKeyDown={onKeyDown}\r\n            />\r\n        \t<button onClick={handleSubmit}> Add </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nTodoForm.displayName = 'TodoForm';\r\n\r\nTodoForm.propTypes = {\r\n    // click: PropTypes.func,\r\n};\r\n\r\nexport default TodoForm;\r\n","import React, { PropTypes, useState } from 'react';\r\n\r\nimport './list.scss';\r\n\r\nconst TodoList = ({ value, click, completed }) => {\r\n\r\n    const [allView, setAllView] = useState(true);\r\n    const [completedView, setCompletedView] = useState(false);\r\n    const hasList = value.length > 0 || completed.length > 0;\r\n    const hasCompletedList = completed.length > 0;\r\n\r\n\r\n    const allViewHandler = () => {\r\n        setAllView(true);\r\n        setCompletedView(false);\r\n    }\r\n    const completedViewHandler = () => {\r\n        setCompletedView(true);\r\n        setAllView(false);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"todo__lists\">\r\n            {hasList &&\r\n            <ul className=\"todo__list\">\r\n                {allView && value.map(item => (\r\n                    <li key={item.id}>\r\n                    {item.text}\r\n                        <div className=\"todo__check-wrap\"  onClick={() => click(item)}>\r\n                            <span className=\"todo__check-icon\"></span>\r\n                        </div>\r\n                    </li>\r\n                ))}\r\n                {hasCompletedList && completedView  && completed.map(item => (\r\n                    <li key={item.id}>{item.text}</li>\r\n                    ))\r\n                }\r\n            </ul>\r\n            }\r\n            {hasList && (\r\n                <div className=\"todo__cat\">\r\n                    <span onClick={allViewHandler} className={` ${allView ? `active`: ``}`}>ALL</span>\r\n                    {hasCompletedList  &&\r\n                        <span onClick={completedViewHandler} className={` ${completedView ? `active`: ``}`}>Completed</span>\r\n                    }\r\n                </div>\r\n            ) }\r\n        </div>\r\n    );\r\n};\r\n\r\nTodoList.displayName = 'TodoList';\r\n\r\nTodoList.propTypes = {\r\n    // value: PropTypes.array,\r\n    // completed: PropTypes.array,\r\n    // click: PropTypes.func,\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { PropTypes, useState } from 'react';\r\n\r\nimport TodoForm from './form';\r\nimport TodoList from './list';\r\n\r\nimport './todo.scss';\r\n\r\nconst ToDo = () => {\r\n\r\n\tconst [items, setItems] = useState([]);\r\n\tconst [completedItems, setCompletedItems] = useState([]);\r\n\r\n\r\n\tconst submitTodo = (input) => {\r\n\t\tif (!input) {\r\n\t\t\treturn;\r\n\t\t  }\r\n\t\tconst newItem = {\r\n\t\t\ttext: input,\r\n\t\t\tid: Date.now()\r\n\t\t};\r\n\t\tsetItems(items.concat(newItem));\r\n\t\t\r\n\t}\r\n\tconst onClickHandler = (it) => {\r\n        setItems(items.filter((item) => {\r\n\t\t\tif(item.id === it.id){\r\n\t\t\t\tconst oldItem = item;\r\n\t\t\t\tsetCompletedItems(completedItems.concat(oldItem));\r\n\t\t\t}\r\n            if(item.id !== it.id){\r\n\t\t\t\treturn item;\r\n\t\t\t}\r\n\t\t}));\r\n\t\t\r\n    }\r\n\r\n    return (\r\n    \t<div className=\"todo__wrapper\">\r\n\t\t\t<h1 className=\"todo__heading\">TODO List</h1>\r\n    \t\t<TodoForm click={submitTodo} />\r\n    \t\t<TodoList value={items} click={onClickHandler} completed={completedItems} />\r\n\t\t\t\r\n    \t</div>\r\n    );\r\n};\r\n\r\n// ToDo.displayName = 'ToDo';\r\n\r\nToDo.propTypes = {\r\n    // className: PropTypes.string,\r\n};\r\n\r\nexport default ToDo;\r\n","import React from 'react';\nimport ToDo from './container/todo';\n\n// import './App.css';\n\nfunction App() {\n  return (\n    <ToDo />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}